encd<-read.csv(paste0(path,"encounter.csv"))
encd<-read.csv(paste0(path,"encount.csv"))
etcd<-read.csv(paste0(path,"entry.csv"))
str(encd)
fit1<-glm(enc~encd,data=encd,family="binomial")
fit1<-glm(as.factor(enc)~enc,data=encd,family="binomial")
fit1<-glm(enc~cir,data=encd,family="binomial")
summary(fit1)
str(etcd)
fit2<-glm(en~wid,data=etcd,family="binomial")
summary(fit2)
zap()
wid<-numeric()
cir<-numeric()
p0<-numeric()
p1<-numeric()
pen<-numeric()
pet<-numeric()
en<-numeric()
et<-numeric()
ein<-numeric()
ec<-numeric()
esd<-numeric()
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
set.seed(1234)
for (j in 1:500) {
cir[j]<-runif(1,0,400)
wid[j]<-runif(1,0,100)
p0[j]<-exp(-3.378643+0.005522*cir[j])/(1+exp(-3.378643+0.005522*cir[j]))
p1[j]<-exp(-2.345527+0.057604*wid[j])/(1+exp(-2.345527+0.057604*wid[j])
if (p0[j]<0) p0[j]==0
if (p0[j]>1) p0[j]==1
if (p1[j]<0) p1[j]==0
if (p1[j]>1) p1[j]==1
for (k in 1:500) {
for (i in 1:100) {
pen[i]<-runif(1,0,1)
pet[i]<-runif(1,0,1)
en[i]<-ifelse(pen[i]>(1-p0[j]),1,0)
if (en[i]==0) et[i]=0 else {
et[i]<-ifelse(pet[i]>(1-p1[j]),1,0)
}
}
ein[k]<-sum(et)
}
ec[j]<-mean(ein)
esd[j]<-sd(ein)
}
set.seed(1234)
for (j in 1:500) {
cir[j]<-runif(1,0,400)
wid[j]<-runif(1,0,100)
p0[j]<-exp(-3.378643+0.005522*cir[j])/(1+exp(-3.378643+0.005522*cir[j]))
p1[j]<-exp(-2.345527+0.057604*wid[j])/(1+exp(-2.345527+0.057604*wid[j])
if (p0[j]<0) p0[j]==0
if (p0[j]>1) p0[j]==1
if (p1[j]<0) p1[j]==0
if (p1[j]>1) p1[j]==1
for (k in 1:500) {
for (i in 1:100) {
pen[i]<-runif(1,0,1)
pet[i]<-runif(1,0,1)
en[i]<-ifelse(pen[i]>(1-p0[j]),1,0)
if (en[i]==0) et[i]=0 else {
et[i]<-ifelse(pet[i]>(1-p1[j]),1,0)
}
}
ein[k]<-sum(et)
}
ec[j]<-mean(ein)
esd[j]<-sd(ein)
}
zap()
wid<-numeric()
cir<-numeric()
p0<-numeric()
p1<-numeric()
pen<-numeric()
pet<-numeric()
en<-numeric()
et<-numeric()
ein<-numeric()
ec<-numeric()
esd<-numeric()
set.seed(1234)
for (j in 1:500) {
cir[j]<-runif(1,0,400)
wid[j]<-runif(1,0,100)
p0[j]<-exp(-3.378643+0.005522*cir[j])/(1+exp(-3.378643+0.005522*cir[j]))
p1[j]<-exp(-2.345527+0.057604*wid[j])/(1+exp(-2.345527+0.057604*wid[j]))
if (p0[j]<0) p0[j]==0
if (p0[j]>1) p0[j]==1
if (p1[j]<0) p1[j]==0
if (p1[j]>1) p1[j]==1
for (k in 1:500) {
for (i in 1:100) {
pen[i]<-runif(1,0,1)
pet[i]<-runif(1,0,1)
en[i]<-ifelse(pen[i]>(1-p0[j]),1,0)
if (en[i]==0) et[i]=0 else {
et[i]<-ifelse(pet[i]>(1-p1[j]),1,0)
}
}
ein[k]<-sum(et)
}
ec[j]<-mean(ein)
esd[j]<-sd(ein)
}
mo1<-data.frame(cir=cir, wid=wid, ec=ec,esd=esd)
str(mo1)
write.csv(mo1,paste0(path,"sim2.csv"))
path<-"C:/Users/T400/Desktop/MosBehave/Monte_Simu/"
write.csv(mo1,paste0(path,"sim2.csv"))
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
s3d <-scatterplot3d(mo1$wid,mo1$cir,mo1$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ", xlab="width(mm)",
ylab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,20))
hist(mo1$ec)
plot(mo1$cir, mo1$ec)
plot(mo1$wid, mo1$ec)
summary(mo1$ec)
s3d <-scatterplot3d(mo1$wid,mo1$cir,mo1$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ", xlab="width(mm)",
ylab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,30))
s3d <-scatterplot3d(mo1$cir,mo1$wid,mo1$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ",
ylab="width(mm)",
xlab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,30))
s3d <-scatterplot3d(mo1$wid,mo1$cir,mo1$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ", xlab="width(mm)",
ylab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,30))
x <- mo1$cir
y <- mo1$wid
z <- mo1$ec
require(akima)
fld <- interp(x,y,z)
par(mar=c(5,5,1,1))
filled.contour(fld,xlab="circumference(mm)",
ylab="width(mm)")
mo<-read.csv(paste0(path,"sim.csv"))
s3d <-scatterplot3d(mo$wid,mo$cir,mo$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ", xlab="width(mm)",
ylab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,20))
s3d <-scatterplot3d(mo$wid,mo$cir,mo$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ", xlab="width(mm)",
ylab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,30))
s3d <-scatterplot3d(mo$cir,mo$wid,mo$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ",
ylab="width(mm)",
xlab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,30))
fit <- glm(mo$ec ~ mo$cir+mo$wid, data=mo, family="ponsion")
fit <- glm(mo$ec ~ mo$cir+mo$wid, data=mo, family="poisson")
fit <- glm(mo$ec ~ mo$cir+mo$wid, data=mo, family="poisson")
s3d$plane3d(fit,lty="dotted")
warnings()
s3d <-scatterplot3d(mo$cir,mo$wid,mo$ec, pch=20, highlight.3d=T,
angle=120,  col.axis = "blue", col.grid = "lightblue",
type="h", main=" ",
ylab="width(mm)",
xlab="circumference(mm)", zlab="entry counts of 100",
zlim=c(0,30))
x <- mo$cir
y <- mo$wid
z <- mo$ec
require(akima)
fld <- interp(x,y,z)
par(mar=c(5,5,1,1))
filled.contour(fld,xlab="circumference(mm)",
ylab="width(mm)")
hist(mo$ec,xlab="means of entry",ylab="frequency")
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,30),main=" ")
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,25),main=" ")
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,20),main=" ")
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,20),main=" ")
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,30),main=" ")
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,25),main=" ")
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,25),ylim=c(0,150),main=" ")
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,25),ylim=c(0,120),main=" ")
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,20),main=" ",ylim=c(0,120))
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,20),main=" ",ylim=c(0,200))
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,20),main=" ",ylim=c(0,150))
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,25),ylim=c(0,150),main=" ")
par(mfrow(1,2))
par(mfrow=c(1,2))
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,20),main=" ",ylim=c(0,150))
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,25),ylim=c(0,150),main=" ")
par(mfrow=c(1,2))
hist(mo$ec,xlab="means of entry",ylab="frequency",xlim=c(0,20),main=" ",ylim=c(0,140))
hist(mo1$ec,xlab="means of entry",ylab="frequency",xlim=c(0,25),ylim=c(0,140),main=" ")
par(mfrow=c(1,2))
hist(mo$ec,xlab="a. means of entry",ylab="frequency",xlim=c(0,20),main=" ",ylim=c(0,140))
hist(mo1$ec,xlab="b. means of entry",ylab="frequency",xlim=c(0,25),ylim=c(0,140),main=" ")
summary(mo$ec)
a<-summary(mo$ec)
b<-t(as.matrix(a))
b
write.csv(paste0(b,"simresult1.csv"))
a<-summary(mo1$ec)
b<-t(as.matrix(a))
write.csv(paste0(b,"simresult2.csv"))
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
a<-summary(mo$ec)
b<-t(as.matrix(a))
write.csv(paste0(b,"simresult1.csv"))
a<-summary(mo1$ec)
b<-t(as.matrix(a))
write.csv(paste0(b,"simresult2.csv"))
a<-summary(mo$ec)
b<-t(as.matrix(a))
write.csv(b,paste0(path,"simresult1.csv"))
a<-summary(mo1$ec)
b<-t(as.matrix(a))
write.csv(b,paste0(path,"simresult2.csv"))
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
mo$lower1<-mo$ec-1.96*mo$ecd
str(mo)
mo$lower1<-mo$ec-1.96*mo$esd
mo$upper1<-mo$ec+1.96*mo$esd
str(mo)
write.csv(mo,paste0(path,"simresult1.csv"))
mo1$lower1<-mo1$ec-1.96*mo1$esd
mo1$upper1<-mo1$ec+1.96*mo1$esd
str(mo1)
write.csv(mo1,paste0(path,"simresult2.csv"))
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
source('C:/Users/T400/Desktop/MosBehave/MonteSim.R')
mainA<-rep(c("A1","A2","A3","A4","A5","A6"),each=12)
mainB<-rep(c("B1","B2","B3","B4","B5","B6"),each=12)
mainC<-rep(c("C1","C2","C3","C4","C5","C6"),each=12)
mainD<-rep(c("D1","D2","D3","D4","D5","D6"),each=12)
mainE<-rep(c("E1","E2","E3","E4","E5","E6"),each=12)
mainF<-rep(c("F1","F2","F3","F4","F5",F6"),each=12)
mains<-c(mainA, mainB,mainC, mainD, mainE,mainF)
str(mains)
mainA<-rep(c("A1","A2","A3","A4","A5","A6"),each=12)
mainB<-rep(c("B1","B2","B3","B4","B5","B6"),each=12)
mainC<-rep(c("C1","C2","C3","C4","C5","C6"),each=12)
mainD<-rep(c("D1","D2","D3","D4","D5","D6"),each=12)
mainE<-rep(c("E1","E2","E3","E4","E5","E6"),each=12)
mainF<-rep(c("F1","F2","F3","F4","F5",F6"),each=12)
mainA<-rep(c("A1","A2","A3","A4","A5","A6"),each=12)
mainA<-rep(c("A1","A2","A3","A4","A5","A6"),each=12))
mainA<-rep(c("A1","A2","A3","A4","A5","A6"),each=12)
mainA<-rep(c("A1","A2","A3","A4","A5","A6"),each=12)
mainB<-rep(c("B1","B2","B3","B4","B5","B6"),each=12)
mainC<-rep(c("C1","C2","C3","C4","C5","C6"),each=12)
mainD<-rep(c("D1","D2","D3","D4","D5","D6"),each=12)
mainE<-rep(c("E1","E2","E3","E4","E5","E6"),each=12)
mainF<-rep(c("F1","F2","F3","F4","F5",F6"),each=12)
mains<-c(mainA, mainB,mainC, mainD, mainE,mainF)
mainA<-rep(c("A1","A2","A3","A4","A5","A6"),each=12)
mainB<-rep(c("B1","B2","B3","B4","B5","B6"),each=12)
mainC<-rep(c("C1","C2","C3","C4","C5","C6"),each=12)
mainD<-rep(c("D1","D2","D3","D4","D5","D6"),each=12)
mainE<-rep(c("E1","E2","E3","E4","E5","E6"),each=12)
mainF<-rep(c("F1","F2","F3","F4","F5","F6"),each=12)
mains<-c(mainA, mainB,mainC, mainD, mainE,mainF)
str(mains)
id<-seq(1:432)
id
posi<-rep(rep(c("left","right"),each=6),12)
posi
posi<-rep(rep(c("left","right"),each=6),36)
str(posi)
seed<-1234
snames<-sample(1:432)
snames
snames<-sample(1:432)
<-sample(1:432)
snames<-sample(1:432)
snames
set.seed<-1234
snames
snames<-paste0("S",as.character(snames))
snames
lab<-cbind(id,snames,mains,posi)
head(lab)
str(lab)
lab<-data.frame(lab)
str(lab)
lab<-data.frame(id=id,samples=snames,mainloc=mains,posi=posi)
str(lab)
path<-"C:/Users/T400/Desktop/JiXinPaper/"
write.csv(lab,paste(path,"labdata.csv",sep=""))
str(lab)
lab1<-lab[,lab$mainloc=="A1"]
namesl<-names(lab$mainloc)
namesl
namesl<-levels(lab$mainloc)
namesl
for (i in namesl) {
lab1<-lab[,lab$mainloc==namesl[i]]
write.csv(lab1,paste(path,"labdata_i.csv",sep=""))
}
for (i in namesl) {
lab1<-lab[,lab$mainloc=="namesl[i]"]
write.csv(lab1,paste(path,"labdata_i.csv",sep=""))
}
lab1
q()
library(caret)
library(kernlab)
library(e1071)
library(rpart)
library(gbm)
library(plyr)
library(randomForest)
library(adabag)
##################################
library(caret)
library(kernlab)
library(e1071)
library(rpart)
library(gbm)
library(plyr)
library(randomForest)
library(adabag)
install.packages("caret")
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(mlbench)
library(adabag)
library(randomForest)
library(e1071)
library(foreach)
library(doParallel)
setwd("C:/Users/T400/Desktop/DataSci/Machine Learning Projects/")
start<-read.csv("pml-training.csv",na.strings=c("#DIV/0!"))
final<-read.csv("pml-testing.csv",na.strings=c("#DIV/0!"))
want<-numeric()
for (i in 1:ncol(start)) {
if (class(start[,i])=="factor") {want[i]=0}
else (want[i]=1)
}
numvar<-names(start[want==1])
prevars<-numvar[-c(1:4)]
modelset<-start[,c(prevars,"classe")]
a<-colSums(is.na(modelset))==0
modelset2<-modelset[,a]
cor<-cor(modelset2[,-53])
higcor<-findCorrelation(cor,0.9)
modelset3<-modelset2[,-higcor]
for (i in 1:ncol(modelset3[,-46])) {
modelset3[,i]<-as.numeric(modelset3[,i])
}
names(modelset3)
intrain<-createDataPartition(y=modelset3$classe,p=0.60,list=F)
training<-modelset3[intrain,]
testing<-modelset3[-intrain,]
prop.table(table(training$classe))
prop.table(table(testing$classe))
names(training)
intrain<-createDataPartition(y=modelset3$classe,p=0.75,list=F)
training<-modelset3[intrain,]
testing<-modelset3[-intrain,]
prop.table(table(training$classe))
prop.table(table(testing$classe))
names(training)
registerDoParallel()
x <- training[-46]
y <- training$classe
rf <- foreach(ntree=rep(15, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(x, y, ntree=ntree)
}
prerf<-predict(rf,testing)
confusionMatrix(prerf,testing$classe)
set.seed(1234)
registerDoParallel()
x <- training[-46]
y <- training$classe
rf <- foreach(ntree=rep(15, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(x, y, ntree=ntree)
}
prerf<-predict(rf,testing)
confusionMatrix(prerf,testing$classe)
fprevar<-names(training)
finaltest<-final[fprevar[fprevar!='classe']]
dim(finaltest)
answers <- predict(rf, finaltest)
answers
set.seed(1234)
attach(training)
registerDoParallel()
testboo <- foreach(mfinal = rep(5, 4), .combine = c, .packages = "adabag") %dopar%
boosting(classe ~.,data=training,mfinal=mfinal,control=rpart.control(maxdepth=15,cp=0.0001))
predb<-predict(testboo,testing)
confusionMatrix(predb,testing$classe)
predb<-predict.boosting(testboo,testing)
registerDoParallel()
boosting(classe ~.,data=training,mfinal=mfinal,control=rpart.control(maxdepth=15,cp=0.0001))
predb<-predict.boosting(testboo,testing)
confusionMatrix(predb,testing$classe)
set.seed(1234)
attach(training)
registerDoParallel()
testboo <- foreach(mfinal = rep(5, 4), .combine = c, .packages = "adabag") %dopar%
boosting(classe ~.,data=training,mfinal=mfinal,control=rpart.control(maxdepth=15,cp=0.0001))
predb<-predict.boosting(testboo,testing)
confusionMatrix(predb,testing$classe)
set.seed(1234)
attach(training)
registerDoParallel()
testboo <- foreach(mfinal = rep(5, 4), .combine = c, .packages = "adabag") %dopar%
boosting(classe ~.,data=training,mfinal=mfinal,control=rpart.control(maxdepth=15,cp=0.0001))
predb<-predict.boosting(testboo,testing)
confusionMatrix(predb,testing$classe)
boosting(classe ~.,data=training,mfinal=100,control=rpart.control(maxdepth=15,cp=0.0001))
testboo<-boosting(classe ~.,data=training,mfinal=100,control=rpart.control(maxdepth=15,cp=0.0001))
predb<-predict.boosting(testboo,testing)
confusionMatrix(predb,testing$classe)
names(testboo)
predb
confusionMatrix(predb$confusion)
answers2 <- predict.boosting(testboo, finaltest)
attach(finaltest)
dim(finaltest)
names(finaltest)
attach(finaltest)
answers2 <- predict.boosting(testboo, finaltest)
names(testing)
final2<-final[names(testing)]
final2<-final[c(names(testing))]
fprevar1<-names(testing)
finaltest<-final[fprevar1]
finaltest<-final[,fprevar1]
fprevar1
finaltest<-final[fprevar1]
finaltest<-final(fprevar1)
names(finaltest)
answers2 <- predict.boosting(testboo, finaltest)
attach(finaltest)
detach(traning)
detach(training)
attach(finaltest)
answers2 <- predict.boosting(testboo, finaltest)
answers
answers2
predb$confusion
finaltest
answers2 <- predict.boosting(testboo,finaltest)
str(finaltest)
for (i in 1:ncol(finaltest)) {
finaltest[,i]<-as.numeric(finaltest[,i])
}
answers2 <- predict.boosting(testboo,finaltest)
str(finaltest)
names(testboo)
finaltest$classe<-NA
answers2 <- predict.boosting(testboo,finaltest)
finaltest$classe<-"A"
answers2 <- predict.boosting(testboo,finaltest)
finaltest$classe<-answer
finaltest$classe<-answers
answers2 <- predict.boosting(testboo,finaltest)
answers2
answers
subm= function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
subm(answers)
plot(prerf, log="y")
varImpPlot(prerf)
varImpPlot(rf)
?plot.randomForest
plot(prerf)
plot(prerf)
?plot.randomForest
MDS.plot(prerf)
MDSplot(prerf)
MDSplot(rf)
plot(rf)
plot(rf)
plot(prerf, log="y")
?MDSplot
plot(prerf, log="y")
confusionMatrix(prerf,testing$classe)
plot(rf)
names(rf)
print(rf)
plot(rf)
plot(rf$oob.times)
plot(rf$ntree)
plot(rf$y)
plot(rf$proximity)
mod<-randomForest(randomForest(x, y, ntree=100) )
names(x)
mod<-randomForest(randomForest(x, y, ntree=100,proximity=T) )
mod<-randomForest(randomForest(x, y, ntree=90,proximity=T) )
plot(rf$proximity)
